version: "3"
services:
  web:
    image: python-app
    command: python app.py
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost/"]
      interval: 30s
      retries: 3
      timeout: 10s
      start_period: 10s
    deploy:
      mode: global 
      restart_policy:
        condition: on-failure
    ports:
      - "4000:80"
    networks:
      - urlshortnernet
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - urlshortnernet
  redis-manager:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - "/home/student/redis:/data"
    deploy:
      placement:
        constraints: [node.role == manager]
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "127.0.0.1", "ping"]
      interval: 30s
      retries: 3
      timeout: 10s
      start_period: 10s
    restart: always	
    networks:
      - urlshortnernet
  redis-worker:
    image: redis:latest
    command: ["redis-server", "--slaveof", "redis-manager", "6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "127.0.0.1", "ping"]
      interval: 30s
      retries: 3
      timeout: 10s
      start_period: 10s
    restart: always
    networks:
      - urlshortnernet
    deploy:
      mode: global
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: on-failure
networks:
  urlshortnernet:
